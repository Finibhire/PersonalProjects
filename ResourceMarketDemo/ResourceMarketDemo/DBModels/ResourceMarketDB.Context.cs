//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ResourceMarketDemo.DBModels
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class RMDDatabaseEntities : DbContext
    {
        public RMDDatabaseEntities()
            : base("name=RMDDatabaseEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<CurrencyExchangeRate> CurrencyExchangeRates { get; set; }
        public virtual DbSet<CurrencyExchanx> CurrencyExchanges { get; set; }
        public virtual DbSet<CurrencyType> CurrencyTypes { get; set; }
        public virtual DbSet<MarketSale> MarketSales { get; set; }
        public virtual DbSet<PurchaseOrder> PurchaseOrders { get; set; }
        public virtual DbSet<ResourceType> ResourceTypes { get; set; }
        public virtual DbSet<SellOrder> SellOrders { get; set; }
        public virtual DbSet<UserCurrency> UserCurrencies { get; set; }
        public virtual DbSet<UserResource> UserResources { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UserAllPivoted> UserAllPivoteds { get; set; }
        public virtual DbSet<UserCurrenciesPivoted> UserCurrenciesPivoteds { get; set; }
        public virtual DbSet<UserResourcesPivoted> UserResourcesPivoteds { get; set; }
    
        public virtual int AddPurchaseOrder(Nullable<int> userId, Nullable<int> resourceTypeId, Nullable<int> resourceRequestAmount, Nullable<byte> currencyTypeId, Nullable<double> currencyPerResource)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var resourceTypeIdParameter = resourceTypeId.HasValue ?
                new ObjectParameter("ResourceTypeId", resourceTypeId) :
                new ObjectParameter("ResourceTypeId", typeof(int));
    
            var resourceRequestAmountParameter = resourceRequestAmount.HasValue ?
                new ObjectParameter("ResourceRequestAmount", resourceRequestAmount) :
                new ObjectParameter("ResourceRequestAmount", typeof(int));
    
            var currencyTypeIdParameter = currencyTypeId.HasValue ?
                new ObjectParameter("CurrencyTypeId", currencyTypeId) :
                new ObjectParameter("CurrencyTypeId", typeof(byte));
    
            var currencyPerResourceParameter = currencyPerResource.HasValue ?
                new ObjectParameter("CurrencyPerResource", currencyPerResource) :
                new ObjectParameter("CurrencyPerResource", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddPurchaseOrder", userIdParameter, resourceTypeIdParameter, resourceRequestAmountParameter, currencyTypeIdParameter, currencyPerResourceParameter);
        }
    
        public virtual int AddSellOrder(Nullable<int> userId, Nullable<int> resourceTypeId, Nullable<int> resourceSellAmount, Nullable<byte> currencyTypeId, Nullable<double> currencyPerResource)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var resourceTypeIdParameter = resourceTypeId.HasValue ?
                new ObjectParameter("ResourceTypeId", resourceTypeId) :
                new ObjectParameter("ResourceTypeId", typeof(int));
    
            var resourceSellAmountParameter = resourceSellAmount.HasValue ?
                new ObjectParameter("ResourceSellAmount", resourceSellAmount) :
                new ObjectParameter("ResourceSellAmount", typeof(int));
    
            var currencyTypeIdParameter = currencyTypeId.HasValue ?
                new ObjectParameter("CurrencyTypeId", currencyTypeId) :
                new ObjectParameter("CurrencyTypeId", typeof(byte));
    
            var currencyPerResourceParameter = currencyPerResource.HasValue ?
                new ObjectParameter("CurrencyPerResource", currencyPerResource) :
                new ObjectParameter("CurrencyPerResource", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddSellOrder", userIdParameter, resourceTypeIdParameter, resourceSellAmountParameter, currencyTypeIdParameter, currencyPerResourceParameter);
        }
    
        public virtual ObjectResult<GetConvertedPurchaseOrders_Result> GetConvertedPurchaseOrders(Nullable<byte> workingCurrency, Nullable<int> workingResource)
        {
            var workingCurrencyParameter = workingCurrency.HasValue ?
                new ObjectParameter("workingCurrency", workingCurrency) :
                new ObjectParameter("workingCurrency", typeof(byte));
    
            var workingResourceParameter = workingResource.HasValue ?
                new ObjectParameter("workingResource", workingResource) :
                new ObjectParameter("workingResource", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetConvertedPurchaseOrders_Result>("GetConvertedPurchaseOrders", workingCurrencyParameter, workingResourceParameter);
        }
    
        public virtual ObjectResult<GetConvertedSellOrders_Result> GetConvertedSellOrders(Nullable<byte> workingCurrency, Nullable<int> workingResource)
        {
            var workingCurrencyParameter = workingCurrency.HasValue ?
                new ObjectParameter("workingCurrency", workingCurrency) :
                new ObjectParameter("workingCurrency", typeof(byte));
    
            var workingResourceParameter = workingResource.HasValue ?
                new ObjectParameter("workingResource", workingResource) :
                new ObjectParameter("workingResource", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetConvertedSellOrders_Result>("GetConvertedSellOrders", workingCurrencyParameter, workingResourceParameter);
        }
    }
}
